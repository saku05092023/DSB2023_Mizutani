---
title: "Homerwork 2"
author: "Sakurako Mizutani"
date: 2023-05-21
format: 
  docx: default
  html:
    toc: true
    toc_float: true
    code-fold: true
editor: visual
---

```{r}
#| label: load-libraries
#| echo: false # This option disables the printing of code (only output is displayed).
#| message: false
#| warning: false

library(tidyverse)
library(wbstats)
library(skimr)
library(countrycode)
library(here)
```

# Data Visualisation - Exploration

Now that you've demonstrated your software is setup, and you have the basics of data manipulation, the goal of this assignment is to practice transforming, visualising, and exploring data.

# Mass shootings in the US

In July 2012, in the aftermath of a mass shooting in a movie theater in Aurora, Colorado, [Mother Jones](https://www.motherjones.com/politics/2012/07/mass-shootings-map/) published a report on mass shootings in the United States since 1982. Importantly, they provided the underlying data set as [an open-source database](https://www.motherjones.com/politics/2012/12/mass-shootings-mother-jones-full-data/) for anyone interested in studying and understanding this criminal behavior.

## Obtain the data

```{r}
#| echo: false
#| message: false
#| warning: false


mass_shootings <- read_csv(here::here("data", "mass_shootings.csv"))

glimpse(mass_shootings)
```

| column(variable)     | description                                                                 |
|--------------------------|---------------------------------------------|
| case                 | short name of incident                                                      |
| year, month, day     | year, month, day in which the shooting occurred                             |
| location             | city and state where the shooting occcurred                                 |
| summary              | brief description of the incident                                           |
| fatalities           | Number of fatalities in the incident, excluding the shooter                 |
| injured              | Number of injured, non-fatal victims in the incident, excluding the shooter |
| total_victims        | number of total victims in the incident, excluding the shooter              |
| location_type        | generic location in which the shooting took place                           |
| male                 | logical value, indicating whether the shooter was male                      |
| age_of_shooter       | age of the shooter when the incident occured                                |
| race                 | race of the shooter                                                         |
| prior_mental_illness | did the shooter show evidence of mental illness prior to the incident?      |

## Explore the data

### Specific questions

-   Generate a data frame that summarizes the number of mass shootings per year.

```{r}
# Convert the date columns to Date type
mass_shootings$year <- as.Date(paste(mass_shootings$year, "01", "01", sep = "-"))

# Group the data by year and count the number of shootings per year
shootings_per_year <- mass_shootings %>%
  group_by(year) %>%
  summarize(num_shootings = n())

# Print the resulting data frame
shootings_per_year
```

-   Generate a bar chart that identifies the number of mass shooters associated with each race category. The bars should be sorted from highest to lowest and each bar should show its number.

```{r}
library(ggplot2)

# Group the data by race and count the number of shooters for each race
shooters_by_race <- mass_shootings %>%
  group_by(race) %>%
  summarize(num_shooters = n()) %>%
  arrange(desc(num_shooters))

# Create a bar chart
ggplot(shooters_by_race, aes(x = reorder(race, -num_shooters), y = num_shooters)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(x = "Race", y = "Number of Shooters") +
  ggtitle("Number of Mass Shooters by Race") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

-   Generate a boxplot visualizing the number of total victims, by type of location.

```{r}
# Create a boxplot
ggplot(mass_shootings, aes(x = location_type, y = total_victims)) +
  geom_boxplot(fill = "steelblue") +
  labs(x = "Location Type", y = "Number of Total Victims") +
  ggtitle("Distribution of Total Victims by Location Type") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

-   Redraw the same plot, but remove the Las Vegas Strip massacre from the dataset.

```{r}
# Remove the Las Vegas Strip massacre from the dataset
filtered_data <- mass_shootings %>%
  filter(case != "Las Vegas Strip massacre")

# Create a boxplot with the filtered dataset
ggplot(filtered_data, aes(x = location_type, y = total_victims)) +
  geom_boxplot(fill = "steelblue") +
  labs(x = "Location Type", y = "Number of Total Victims") +
  ggtitle("Distribution of Total Victims by Location Type (Excluding Las Vegas Strip Massacre)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

### More open-ended questions

Address the following questions. Generate appropriate figures/tables to support your conclusions.

-   How many white males with prior signs of mental illness initiated a mass shooting after 2000?

```{r}
# Filter the data for white males with prior signs of mental illness after 2000
filtered_data <- mass_shootings %>%
  filter(race == "white", male == TRUE, prior_mental_illness == TRUE, year > 2000)

# Count the number of incidents
count <- nrow(filtered_data)

# Print the result
cat("Number of white males with prior signs of mental illness initiating a mass shooting after 2000:", count)

```

-   Which month of the year has the most mass shootings? Generate a bar chart sorted in chronological (natural) order (Jan-Feb-Mar- etc) to provide evidence of your answer.

```{r}
# Create a new column to extract the month from the date
# mass_shootings <- read_csv(here::here("data", "mass_shootings.csv"))
# mass_shootings$month <- format(as.Date(paste(mass_shootings$year, mass_shootings$month, "01", sep = "-")), "%b")
# 
# # Count the number of shootings per month
# shooting_counts <- mass_shootings %>%
#   group_by(month) %>%
#   summarise(count = n()) %>%
#   arrange(match(month, month.name))
# 
# # Sort the shooting counts in chronological order
# #################----CONSIDERING---###################
# 
# 
# # Generate a bar chart with the custom order
# ggplot(shooting_counts, aes(x = month, y = count)) +
#   geom_bar(stat = "identity", fill = "steelblue") +
#   labs(x = "Month", y = "Number of Mass Shootings") +
#   ggtitle("Number of Mass Shootings by Month") +
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))

###A. Feb

```

-   How does the distribution of mass shooting fatalities differ between White and Black shooters? What about White and Latino shooters?

```{r}
# Subset the data for Black, Latino, and White shooters
blw_data <- mass_shootings %>%
  filter(race %in% c("Black", "Latino", "White"))

# Generate box plots for Black, Latino, and White shooters
ggplot(blw_data, aes(x = race, y = fatalities)) +
  geom_boxplot(fill = "steelblue") +
  labs(x = "Shooter Race", y = "Number of Fatalities") +
  ggtitle("Distribution of Mass Shooting Fatalities\n(Black, Latino, and White Shooters)") +
  theme_minimal()

###A. White has the largest Number of Fatalities in terms of mean, median, and independent sample data.
```

```         
```

### Very open-ended

-   Are mass shootings with shooters suffering from mental illness different from mass shootings with no signs of mental illness in the shooter?

```{r}
mass_shootings <- read_csv(here::here("data", "mass_shootings.csv"))

#########------------CONSIDERING--------------#################

# Filter data for Shooters A (suffering from mental illness) and Shooters B (no signs of mental illness)
shooters_A <- mass_shootings %>% filter(prior_mental_illness == "Yes")
shooters_B <- mass_shootings %>% filter(prior_mental_illness == "No")

# Count the number of shootings for each group
shooters_A_counts <- count(shooters_A)
shooters_B_counts <- count(shooters_B)

# Create a data frame for the bar graph
#data <- data.frame(
#  Shooters = c("With mental illness", "Without mental illness"),
#  Number_of_Shootings = c(shooters_A_counts, shooters_B_counts))

# Create a bar graph to compare the number of shootings for each group
# ggplot(data, aes(x = Shooters, y = Number_of_Shootings, fill = Shooters)) +
#   geom_bar(stat = "identity") +
#   labs(x = "Shooters", y = "Number of Shootings", fill = "Shooters") +
#   ggtitle("Comparison of Mass Shootings\n(Suffering from Mental Illness vs. No Signs of Mental Illness)") +
#   theme_minimal() +
#   theme(legend.position = "none")


```

-   Assess the relationship between mental illness and total victims, mental illness and location type, and the intersection of all three variables.

```{r}

#########------------CONSIDERING--------------#################


# Filter data for Shooters with mental illness (Yes) and without mental illness (No)
shooters_mental_illness <- mass_shootings %>% filter(prior_mental_illness == "Yes")
shooters_no_mental_illness <- mass_shootings %>% filter(prior_mental_illness == "No")

# Calculate the total number of victims for each group
total_victims_mental_illness <- sum(shooters_mental_illness$total_victims)
total_victims_no_mental_illness <- sum(shooters_no_mental_illness$total_victims)

# Create a data frame for the bar graph
data_total_victims <- data.frame(
  Mental_Illness = c("Yes", "No"),
  Number_of_Victims = c(total_victims_mental_illness, total_victims_no_mental_illness)
)

# Create a bar graph to compare the number of total victims depending on mental illness
ggplot(data_total_victims, aes(x = Mental_Illness, y = Number_of_Victims, fill = Mental_Illness)) +
  geom_bar(stat = "identity") +
  labs(x = "Mental Illness", y = "Number of Total Victims", fill = "Mental Illness") +
  ggtitle("Comparison of Total Victims\n(Mental Illness vs. No Mental Illness)") +
  theme_minimal() +
  theme(legend.position = "none")

```

Make sure to provide a couple of sentences of written interpretation of your tables/figures. Graphs and tables alone will not be sufficient to answer this question.

# Exploring credit card fraud

We will be using a dataset with credit card transactions containing legitimate and fraud transactions. Fraud is typically well below 1% of all transactions, so a naive model that predicts that all transactions are legitimate and not fraudulent would have an accuracy of well over 99%-- pretty good, no? (well, not quite as we will see later in the course)

You can read more on credit card fraud on [Credit Card Fraud Detection Using Weighted Support Vector Machine](https://www.scirp.org/journal/paperinformation.aspx?paperid=105944)

The dataset we will use consists of credit card transactions and it includes information about each transaction including customer details, the merchant and category of purchase, and whether or not the transaction was a fraud.

## Obtain the data

The dataset is too large to be hosted on Canvas or Github, so please download it from dropbox https://www.dropbox.com/sh/q1yk8mmnbbrzavl/AAAxzRtIhag9Nc_hODafGV2ka?dl=0 and save it in your `dsb` repo, under the `data` folder

```{r}
#| echo: false
#| message: false
#| warning: false

card_fraud <- read_csv(here::here("data", "card_fraud.csv"))

glimpse(card_fraud)
```

The data dictionary is as follows

| column(variable)      | description                                 |
|-----------------------|---------------------------------------------|
| trans_date_trans_time | Transaction DateTime                        |
| trans_year            | Transaction year                            |
| category              | category of merchant                        |
| amt                   | amount of transaction                       |
| city                  | City of card holder                         |
| state                 | State of card holder                        |
| lat                   | Latitude location of purchase               |
| long                  | Longitude location of purchase              |
| city_pop              | card holder's city population               |
| job                   | job of card holder                          |
| dob                   | date of birth of card holder                |
| merch_lat             | Latitude Location of Merchant               |
| merch_long            | Longitude Location of Merchant              |
| is_fraud              | Whether Transaction is Fraud (1) or Not (0) |

-   In this dataset, how likely are fraudulent transactions? Generate a table that summarizes the number and frequency of fraudulent transactions per year.

```{r}
# Filter the data and summarize the amt
summary_table <- card_fraud %>%
  filter(trans_year %in% c(2019, 2020)) %>%
  group_by(trans_year, is_fraud) %>%
  summarise(Count = n()) %>%
  pivot_wider(names_from = is_fraud, values_from = Count, values_fill = 0) %>%
  mutate(Fraudulent_Rate = `1` / (`0` + `1`) * 100)

# Create the table
summary_table <- summary_table %>%
  mutate(trans_year = as.character(trans_year)) %>%
  arrange(trans_year) %>%
  select(trans_year, `0` = `0`, `1` = `1`, Fraudulent_Rate)

# Show the table
summary_table

```

-   How much money (in US\$ terms) are fraudulent transactions costing the company? Generate a table that summarizes the total amount of legitimate and fraudulent transactions per year and calculate the % of fraudulent transactions, in US\$ terms.

```{r}
# Filter out missing values in the 'amt' column
card_fraud <- card_fraud[!is.na(card_fraud$amt), ]

# Filter and summarize the data based on conditions
summary_table <- card_fraud %>%
  group_by(is_fraud, trans_year) %>%
  summarize(Total_Amount = sum(amt), .groups = "drop") %>%
  pivot_wider(names_from = trans_year, values_from = Total_Amount, names_prefix = "")

# Set the column names and row names
colnames(summary_table) <- c("fraudulent flag", "2019", "2020")
rownames(summary_table) <- c("legitimate", "fraudulent")

# Print the summary table
summary_table
```

-   Generate a histogram that shows the distribution of amounts charged to credit card, both for legitimate and fraudulent accounts. Also, for both types of transactions, calculate some quick summary statistics.

```{r}
# Filter legitimate and fraudulent transactions
legitimate_transactions <- card_fraud %>% filter(is_fraud == 0)
fraudulent_transactions <- card_fraud %>% filter(is_fraud == 1)

# Histogram of amounts for legitimate transactions
plot_legitimate <- ggplot(legitimate_transactions, aes(x = amt)) +
  geom_histogram(fill = "blue", bins = 30) +
  labs(title = "Distribution of Amounts for Legitimate Transactions", x = "Amount", y = "Frequency")

# Histogram of amounts for fraudulent transactions
plot_fraudulent <- ggplot(fraudulent_transactions, aes(x = amt)) +
  geom_histogram(fill = "red", bins = 30) +
  labs(title = "Distribution of Amounts for Fraudulent Transactions", x = "Amount", y = "Frequency")

# Set up the layout for comparison
par(mfrow = c(1, 2))

# Display the histograms side by side
plot_legitimate
plot_fraudulent
```

-   What types of purchases are most likely to be instances of fraud? Consider category of merchants and produce a bar chart that shows % of total fraudulent transactions sorted in order.

```{r}
# Calculate the total number of fraudulent transactions
total_fraudulent <- sum(card_fraud$is_fraud == 1)

# Calculate the percentage of fraudulent transactions by category of merchants
fraudulent_percentage <- card_fraud %>%
  filter(is_fraud == 1) %>%
  group_by(category) %>%
  summarise(Percentage = n() / total_fraudulent * 100) %>%
  arrange(desc(Percentage))

# Create the bar chart
ggplot(fraudulent_percentage, aes(x = reorder(category, Percentage), y = Percentage)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Percentage of Total Fraudulent Transactions by Category of Merchants",
       x = "Category of Merchants", y = "Percentage") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip()

###A. grocery_pos
```

-   When is fraud more prevalent? Which days, months, hours? To create new variables to help you in your analysis, we use the `lubridate` package and the following code

```         
mutate(
  date_only = lubridate::date(trans_date_trans_time),
  month_name = lubridate::month(trans_date_trans_time, label=TRUE),
  hour = lubridate::hour(trans_date_trans_time),
  weekday = lubridate::wday(trans_date_trans_time, label = TRUE)
  )
```

```{r}
library(lubridate)
library(dplyr)

# Create new variables for analysis
card_fraud <- card_fraud %>%
  mutate(
    date_only = date(trans_date_trans_time),
    month_name = month(trans_date_trans_time, label = TRUE),
    hour = hour(trans_date_trans_time),
    weekday = wday(trans_date_trans_time, label = TRUE)
  )

# Prevalence of fraud by day
fraud_by_day <- card_fraud %>%
  group_by(weekday) %>%
  summarise(fraud_count = sum(is_fraud == 1), total_count = n()) %>%
  mutate(fraud_percent = (fraud_count / total_count) * 100) %>%
  arrange(desc(fraud_percent))

# Prevalence of fraud by month
fraud_by_month <- card_fraud %>%
  group_by(month_name) %>%
  summarise(fraud_count = sum(is_fraud == 1), total_count = n()) %>%
  mutate(fraud_percent = (fraud_count / total_count) * 100) %>%
  arrange(desc(fraud_percent))

# Prevalence of fraud by hour
fraud_by_hour <- card_fraud %>%
  group_by(hour) %>%
  summarise(fraud_count = sum(is_fraud == 1), total_count = n()) %>%
  mutate(fraud_percent = (fraud_count / total_count) * 100) %>%
  arrange(hour)

# Display the results
print("Prevalence of fraud by day:")
print(fraud_by_day)

print("Prevalence of fraud by month:")
print(fraud_by_month)

print("Prevalence of fraud by hour:")
print(fraud_by_hour)

```

-   Are older customers significantly more likely to be victims of credit card fraud? To calculate a customer's age, we use the `lubridate` package and the following code

```         
  mutate(
   age = interval(dob, trans_date_trans_time) / years(1),
    )
```

```{r}
# Calculate customer's age
card_fraud <- card_fraud %>%
  mutate(age = interval(dob, trans_date_trans_time) / years(1))

# Group customers' age into 10-year intervals
card_fraud <- card_fraud %>%
  mutate(age_group = cut(age, breaks = seq(0, 100, 10), right = FALSE, include.lowest = TRUE))

# Summarize the number of transactions by age group
transactions_by_age_group <- card_fraud %>%
  group_by(age_group) %>%
  summarise(total_transactions = n())

# Calculate fraud rate by age group
fraud_rate_by_age_group <- card_fraud %>%
  group_by(age_group) %>%
  summarise(fraud_transactions = sum(is_fraud),
            total_transactions = n()) %>%
  mutate(fraud_rate = (fraud_transactions / total_transactions) * 100)

# Create a graph to show the fraud rate by age group
ggplot(fraud_rate_by_age_group, aes(x = age_group, y = fraud_rate)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(title = "Fraud Rate by Age Group", x = "Age Group", y = "Fraud Rate (%)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

###A. Customers over 70 had higher fraud rate, but customers under 30 also had relativley higher fraud rate.
```

-   Is fraud related to distance? The distance between a card holder's home and the location of the transaction can be a feature that is related to fraud. To calculate distance, we need the latidue/longitude of card holders's home and the latitude/longitude of the transaction, and we will use the [Haversine formula](https://en.wikipedia.org/wiki/Haversine_formula) to calculate distance. I adapted code to [calculate distance between two points on earth](https://www.geeksforgeeks.org/program-distance-two-points-earth/amp/) which you can find below

```{r}
# distance between card holder's home and transaction
# code adapted from https://www.geeksforgeeks.org/program-distance-two-points-earth/amp/

# card_fraud <- card_fraud %>%
#   mutate(
#     
#     # convert latitude/longitude to radians
#     lat1_radians = lat / 57.29577951,
#     lat2_radians = merch_lat / 57.29577951,
#     long1_radians = long / 57.29577951,
#     long2_radians = merch_long / 57.29577951,
#     
#     # calculate distance in miles
#     distance_miles = 3963.0 * acos((sin(lat1_radians) * sin(lat2_radians)) + cos(lat1_radians) * cos(lat2_radians) * cos(long2_radians - long1_radians)),
# 
#     # calculate distance in km
#     distance_km = 6377.830272 * acos((sin(lat1_radians) * sin(lat2_radians)) + cos(lat1_radians) * cos(lat2_radians) * cos(long2_radians - long1_radians))
# 
#   )

```

Plot a boxplot or a violin plot that looks at the relationship of distance and `is_fraud`. Does distance seem to be a useful feature in explaining fraud?

```{r}
# Function to calculate distance using Haversine formula
calculate_distance <- function(lat1, lon1, lat2, lon2) {
  lat1_radians <- lat1 / 57.29577951
  lon1_radians <- lon1 / 57.29577951
  lat2_radians <- lat2 / 57.29577951
  lon2_radians <- lon2 / 57.29577951
  
  dlon <- lon2_radians - lon1_radians
  dlat <- lat2_radians - lat1_radians
  
  a <- sin(dlat/2)^2 + cos(lat1_radians) * cos(lat2_radians) * sin(dlon/2)^2
  c <- 2 * atan2(sqrt(a), sqrt(1-a))
  
  distance <- 3963.0 * c  # Distance in miles
  
  return(distance)
}

# Group by distance between card holder's home and transaction in 10-mile intervals
card_fraud <- card_fraud %>%
  mutate(distance = calculate_distance(lat, long, merch_lat, merch_long),
         distance_group = cut(distance, breaks = seq(0, max(distance), 10), right = FALSE, include.lowest = TRUE))

# Summarize the number of transactions by distance group
transactions_by_distance_group <- card_fraud %>%
  group_by(distance_group) %>%
  summarise(total_transactions = n())

# Calculate fraud rate by distance group
fraud_rate_by_distance_group <- card_fraud %>%
  group_by(distance_group) %>%
  summarise(fraud_transactions = sum(is_fraud),
            total_transactions = n()) %>%
  mutate(fraud_rate = (fraud_transactions / total_transactions) * 100)

# Create a graph to show the fraud rate by distance group
ggplot(fraud_rate_by_distance_group, aes(x = distance_group, y = fraud_rate)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(title = "Fraud Rate by Distance Group", x = "Distance Group (miles)", y = "Fraud Rate (%)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

###A. There is no strong correlation between the fraud rate and the distance, but if the distance is over 80, the fraud rate is slightly higher.
```

# Exploring sources of electricity production, CO2 emissions, and GDP per capita.

There are many sources of data on how countries generate their electricity and their CO2 emissions. I would like you to create three graphs:

## 1. A stacked area chart that shows how your own country generated its electricity since 2000.

You will use

`geom_area(colour="grey90", alpha = 0.5, position = "fill")`

## 2. A scatter plot that looks at how CO2 per capita and GDP per capita are related

## 3. A scatter plot that looks at how electricity usage (kWh) per capita/day GDP per capita are related

We will get energy data from the Our World in Data website, and CO2 and GDP per capita emissions from the World Bank, using the `wbstats`package.

```{r}
#| message: false
#| warning: false

# Download electricity data
url <- "https://nyc3.digitaloceanspaces.com/owid-public/data/energy/owid-energy-data.csv"

energy <- read_csv(url) %>% 
  filter(year >= 1990) %>% 
  drop_na(iso_code) %>% 
  select(1:3,
         biofuel = biofuel_electricity,
         coal = coal_electricity,
         gas = gas_electricity,
         hydro = hydro_electricity,
         nuclear = nuclear_electricity,
         oil = oil_electricity,
         other_renewable = other_renewable_exc_biofuel_electricity,
         solar = solar_electricity,
         wind = wind_electricity, 
         electricity_demand,
         electricity_generation,
         net_elec_imports,	# Net electricity imports, measured in terawatt-hours
         energy_per_capita,	# Primary energy consumption per capita, measured in kilowatt-hours	Calculated by Our World in Data based on BP Statistical Review of World Energy and EIA International Energy Data
         energy_per_gdp,	# Energy consumption per unit of GDP. This is measured in kilowatt-hours per 2011 international-$.
         per_capita_electricity, #	Electricity generation per capita, measured in kilowatt-hours
  ) 

# Download data for C02 emissions per capita https://data.worldbank.org/indicator/EN.ATM.CO2E.PC
co2_percap <- wb_data(country = "countries_only", 
                      indicator = "EN.ATM.CO2E.PC", 
                      start_date = 1990, 
                      end_date = 2022,
                      return_wide=FALSE) %>% 
  filter(!is.na(value)) %>% 
  #drop unwanted variables
  select(-c(unit, obs_status, footnote, last_updated)) %>% 
  rename(year = date,
         co2percap = value)


# Download data for GDP per capita  https://data.worldbank.org/indicator/NY.GDP.PCAP.PP.KD
gdp_percap <- wb_data(country = "countries_only", 
                      indicator = "NY.GDP.PCAP.PP.KD", 
                      start_date = 1990, 
                      end_date = 2022,
                      return_wide=FALSE) %>% 
  filter(!is.na(value)) %>% 
  #drop unwanted variables
  select(-c(unit, obs_status, footnote, last_updated)) %>% 
  rename(year = date,
         GDPpercap = value)
```

Specific questions:

1.  How would you turn `energy` to long, tidy format?
2.  You may need to join these data frames
    -   Use `left_join` from `dplyr` to [join the tables](http://r4ds.had.co.nz/relational-data.html)
    -   To complete the merge, you need a unique *key* to match observations between the data frames. Country names may not be consistent among the three dataframes, so please use the 3-digit ISO code for each country
    -   An aside: There is a great package called [`countrycode`](https://github.com/vincentarelbundock/countrycode) that helps solve the problem of inconsistent country names (Is it UK? United Kingdon? Great Britain?). `countrycode()` takes as an input a country's name in a specific format and outputs it using whatever format you specify.
3.  Write a function that takes as input any country's name and returns all three graphs. You can use the `patchwork` package to arrange the three graphs as shown below

![](images/electricity-co2-gdp.png)

# Deliverables

There is a lot of explanatory text, comments, etc. You do not need these, so delete them and produce a stand-alone document that you could share with someone. Knit the edited and completed Quarto Markdown (qmd) file as a Word document (use the "Render" button at the top of the script editor window) and upload it to Canvas. You must be commiting and pushing tour changes to your own Github repo as you go along.

# Details

-   Who did you collaborate with: TYPE NAMES HERE
-   Approximately how much time did you spend on this problem set: ANSWER HERE
-   What, if anything, gave you the most trouble: ANSWER HERE

**Please seek out help when you need it,** and remember the [15-minute rule](https://mam2022.netlify.app/syllabus/#the-15-minute-rule){target="_blank"}. You know enough R (and have enough examples of code from class and your readings) to be able to do this. If you get stuck, ask for help from others, post a question on Slack-- and remember that I am here to help too!

> As a true test to yourself, do you understand the code you submitted and are you able to explain it to someone else?

# Rubric

13/13: Problem set is 100% completed. Every question was attempted and answered, and most answers are correct. Code is well-documented (both self-documented and with additional comments as necessary). Used tidyverse, instead of base R. Graphs and tables are properly labelled. Analysis is clear and easy to follow, either because graphs are labeled clearly or you've written additional text to describe how you interpret the output. Multiple Github commits. Work is exceptional. I will not assign these often.

8/13: Problem set is 60--80% complete and most answers are correct. This is the expected level of performance. Solid effort. Hits all the elements. No clear mistakes. Easy to follow (both the code and the output). A few Github commits.

5/13: Problem set is less than 60% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not assign these often. Displays minimal effort. Doesn't complete all components. Code is poorly written and not documented. Uses the same type of plot for each graph, or doesn't use plots appropriate for the variables being analyzed. No Github commits.
